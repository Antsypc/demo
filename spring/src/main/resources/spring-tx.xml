<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="classpath:jdbc.properties"/>
    <context:component-scan base-package="xyz.antsgroup.demo.spring.transaction.dao, xyz.antsgroup.demo.spring.transaction.service"/>

    <!-- 配置数据源, c3p0 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxPoolSize" value="30"/>
        <property name="minPoolSize" value="10"/>
        <property name="autoCommitOnClose" value="false"/>
        <property name="checkoutTimeout" value="1000"/>
        <property name="acquireRetryAttempts" value="2"/>
    </bean>

    <!--
        配置 sqlSessionFactory, mybatis
        如果不使用 MapperScannerConfigurer 去自动创建实现类,需要自己去实现每个方法的具体实现.
        Spring JDBC 使用 JdbcTemplate 操作数据库, MyBatis 使用 SqlSessionTemplate
        <bean class="org.mybatis.spring.SqlSessionTemplate">
            <constructor-arg ref="sqlSessionFactory"/>
        </bean>
    -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:config/mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:config/mapper/*.xml"/>
        <!-- 扫描 entity 包,自动识别别名,如果有多个包用`;`隔开 -->
        <property name="typeAliasesPackage" value="xyz.antsgroup.demo.spring.transaction.entity"/>
    </bean>
    <!-- 配置扫描器,扫描 DAO 接口的包,注入 bean 容器.这样就不用去实现接口,框架自动实现接口类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入 bean -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 扫描 xyz.antsgroup.demo.spring.transaction.dao 这个包以及它的子包下的所有映射接口类 -->
        <property name="basePackage" value="xyz.antsgroup.demo.spring.transaction.dao"/>
    </bean>

    <!-- Spring 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>

    <!-- 扫描 @Transaction 的 Bean,加工织入事务管理切面 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>


    <!-- Spring JdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
          p:dataSource-ref="dataSource"/>
    <context:component-scan base-package="xyz.antsgroup.demo.spring.transaction.jdbc"/>
</beans>